{"version":3,"sources":["components/TodoList.js","components/AddEditTodo.js","components/Todo.js","App.js","reportWebVitals.js","index.js"],"names":["library","add","fab","faTrash","faEdit","TodoList","props","List","data","Lists","map","x","index","uidv4","title","icon","onClick","delete","edit","Container","Form","Row","className","Col","xs","lg","Table","striped","bordered","hover","AddEditTodo","InputGroup","FormControl","placeholder","aria-label","aria-describedby","onChange","change","value","name","onKeyPress","event","key","submit","Append","Button","variant","Todo","useState","isEdit","input_todo","setTodo","useEffect","localStorage","getItem","length","split","setLocalStorage","setItem","setLocalStorageForTodoName","target","window","confirm","splice","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yTASAA,IAAQC,IAAIC,IAAKC,IAAQC,KAEzB,IAkCeC,EAlCE,SAAAC,GACb,IAAMC,EAAOD,EAAME,KAAKC,MAAMC,KAAI,SAACC,EAAGC,GAClC,OACI,+BACI,6BAAmBD,GAAVE,OACT,+BAAkB,cAAC,IAAD,CAAiBC,MAAM,kBAAkBC,KAAK,QAAQC,QAAS,kBAAMV,EAAMW,OAAOL,MAApG,IAA8G,cAAC,IAAD,CAAiBE,MAAM,gBAAgBC,KAAK,OAAOC,QAAS,kBAAMV,EAAMY,KAAKN,QAAlLC,SAFJA,UAMjB,OACI,cAACM,EAAA,EAAD,UACI,cAACC,EAAA,EAAKC,IAAN,CAAUC,UAAU,4BAApB,SACI,cAACC,EAAA,EAAD,CAAKC,IAAE,EAACC,GAAG,IAAX,SACI,eAACC,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,EAA7B,UACI,gCACI,+BACI,sCAGA,6CAKR,gCACKtB,c,gCCEduB,EA9BK,SAAAxB,GAMhB,OACI,cAACa,EAAA,EAAD,UACI,cAACC,EAAA,EAAKC,IAAN,CAAUC,UAAU,4BAApB,SACI,cAACC,EAAA,EAAD,CAAKC,IAAE,EAACC,GAAG,IAAX,SACI,eAACM,EAAA,EAAD,CAAYT,UAAU,OAAtB,UACI,cAACU,EAAA,EAAD,CACIC,YAAY,OACZC,aAAW,OACXC,mBAAiB,eACjBC,SAAU9B,EAAM+B,OAChBC,MAAOhC,EAAMgC,MAAMC,KACnBC,WAhBA,SAACC,GACH,UAAdA,EAAMC,KACNpC,EAAMqC,YAgBM,cAACZ,EAAA,EAAWa,OAAZ,UACI,cAACC,EAAA,EAAD,CAAQC,QAAQ,UAAU9B,QAASV,EAAMqC,OAAzC,gC,QCyFbI,EA9GF,WAAO,IAAD,EACeC,mBAC1B,CACIT,KAAM,GACN9B,MAAO,GACPwC,QAAQ,EACRrC,MAAO,IANA,mBACRsC,EADQ,KACIC,EADJ,KAUfC,qBAAU,WAEgC,OAAlCC,aAAaC,QAAQ,UAA8D,IAAzCD,aAAaC,QAAQ,SAASC,QACxEJ,EAAQ,CACJZ,KAAMc,aAAaC,QAAQ,QAC3B7C,MAAM,YAAK4C,aAAaC,QAAQ,SAASE,MAAM,MAC/CP,QAAQ,EACRrC,MAAO,MAGhB,IACH,IAuDM6C,EAAkB,SAAChD,GACrB4C,aAAaK,QAAQ,OAAQ,IAC7BL,aAAaK,QAAQ,QAArB,YAAkCjD,IAClC4C,aAAaK,QAAQ,UAAU,GAC/BL,aAAaK,QAAQ,QAAS,IAG5BC,EAA6B,SAAApB,GAAI,OAAIc,aAAaK,QAAQ,OAAQnB,IAExE,OACI,eAACpB,EAAA,EAAD,WACI,cAACE,EAAA,EAAD,UACI,eAACE,EAAA,EAAD,WACI,0CACA,4BAGR,cAACF,EAAA,EAAD,UACI,cAACE,EAAA,EAAD,UACI,cAAC,EAAD,CACIc,OA3EG,SAACI,GACpBkB,EAA2BlB,EAAMmB,OAAOtB,OACxCa,EAAQ,CACJZ,KAAME,EAAMmB,OAAOtB,MACnB7B,MAAM,YAAKyC,EAAWzC,OACtBwC,OAAQC,EAAWD,OACnBrC,MAAOsC,EAAWtC,SAsEN+B,OAlEG,WACnB,GAA+B,IAA3BO,EAAWX,KAAKgB,QAAiBL,EAAWD,OAS3C,CACD,IAAMzC,EAAO0C,EAAWzC,MACxBD,EAAK0C,EAAWtC,OAASsC,EAAWX,KACpCY,EAAQ,CACJZ,KAAM,GACN9B,MAAM,YAAKD,GACXyC,QAAQ,EACRrC,MAAO,SAfX6C,EAAgB,GAAD,mBAAKP,EAAWzC,OAAhB,CAAsByC,EAAWX,QAChDY,EAAQ,CACJZ,KAAM,GACN9B,MAAM,GAAD,mBAAMyC,EAAWzC,OAAjB,CAAwByC,EAAWX,OACxCU,QAAQ,EACRrC,MAAO,KA4DC0B,MAAOY,QAGnB,cAAC7B,EAAA,EAAD,UACI,cAACE,EAAA,EAAD,UACI,cAAC,EAAD,CAAUf,KAAM0C,EAAYjC,OAnDlB,SAACL,GACvB,GAAIiD,OAAOC,QAAQ,sCAAuC,CACtD,IAAMtD,EAAO0C,EAAWzC,MACxBD,EAAKuD,OAAOnD,EAAO,GAEnB6C,EAAgBjD,GAEhB2C,EAAQ,CACJZ,KAAMW,EAAWX,KACjB9B,MAAM,YAAKD,GACXyC,QAAQ,EACRrC,MAAO,MAwCoDM,KApC/C,SAACN,GACrB,IAAMJ,EAAO0C,EAAWzC,MAAMG,GAC9BuC,EAAQ,CACJZ,KAAM/B,EACNC,MAAM,YAAKyC,EAAWzC,OACtBwC,QAAQ,EACRrC,MAAOA,eCrEJoD,MARf,WACE,OACE,qBAAK1C,UAAU,MAAf,SACE,cAAC,EAAD,OCMS2C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.62d5430c.chunk.js","sourcesContent":["import Table from 'react-bootstrap/Table';\nimport Container from 'react-bootstrap/Container';\nimport Col from 'react-bootstrap/Col';\nimport { Form } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome/'\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { fab } from '@fortawesome/free-brands-svg-icons'\nimport { faTrash,faEdit } from '@fortawesome/free-solid-svg-icons'\nimport uidv4 from 'uuid/dist/v4';\nlibrary.add(fab, faTrash,faEdit);\n\nconst TodoList = props => {\n    const List = props.data.Lists.map((x, index) => {\n        return (\n            <tr key={uidv4()}>\n                <td key={uidv4()}>{x}</td>\n                <td key={uidv4()}><FontAwesomeIcon title='Click to delete' icon=\"trash\" onClick={() => props.delete(index)}/> <FontAwesomeIcon title='Click to edit' icon=\"edit\" onClick={() => props.edit(index)}/></td>\n            </tr>\n        )\n    })\n    return (\n        <Container>\n            <Form.Row className=\"justify-content-md-center\">\n                <Col xs lg=\"5\">\n                    <Table striped bordered hover>\n                        <thead>\n                            <tr>\n                                <th>\n                                    Task\n                                </th>\n                                <th>\n                                    Action\n                                </th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {List}\n                        </tbody>\n                    </Table>\n                </Col>\n            </Form.Row>\n        </Container>\n    )\n}\n\nexport default TodoList;","import Button from 'react-bootstrap/Button';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Container from 'react-bootstrap/Container';\nimport Col from 'react-bootstrap/Col';\nimport Form from 'react-bootstrap/Form';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport FormControl from 'react-bootstrap/FormControl';\n\nconst AddEditTodo = props => {\n    const EnterKeyHandler = (event) => {\n        if (event.key === \"Enter\") {\n            props.submit();\n        }\n    }\n    return (\n        <Container>\n            <Form.Row className=\"justify-content-md-center\">\n                <Col xs lg=\"5\">\n                    <InputGroup className=\"mb-3\">\n                        <FormControl\n                            placeholder=\"Task\"\n                            aria-label=\"Task\"\n                            aria-describedby=\"basic-addon2\"\n                            onChange={props.change}\n                            value={props.value.name}\n                            onKeyPress={EnterKeyHandler}\n                        />\n                        <InputGroup.Append>\n                            <Button variant=\"primary\" onClick={props.submit}>Submit</Button>\n                        </InputGroup.Append>\n                    </InputGroup>\n                </Col>\n            </Form.Row>\n        </Container>\n\n    )\n}\n\nexport default AddEditTodo;","import TodoList from './TodoList';\nimport AddEditTodo from './AddEditTodo';\nimport { useState, useEffect } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nconst Todo = () => {\n    const [input_todo, setTodo] = useState(\n        {\n            name: '',\n            Lists: [],\n            isEdit: false,\n            index: 0\n        }\n    );\n\n    useEffect(() => {\n        debugger\n        if (localStorage.getItem('Lists') !== null && localStorage.getItem('Lists').length !== 0) {\n            setTodo({\n                name: localStorage.getItem('name'),\n                Lists: [...localStorage.getItem('Lists').split(',')],\n                isEdit: false,\n                index: 0\n            })\n        }\n    }, []);\n    const setTodoHandler = (event) => {\n        setLocalStorageForTodoName(event.target.value);\n        setTodo({\n            name: event.target.value,\n            Lists: [...input_todo.Lists],\n            isEdit: input_todo.isEdit,\n            index: input_todo.index\n        })\n    };\n\n    const AddToDoHandler = () => {\n        if (input_todo.name.length !== 0 && !input_todo.isEdit) {\n            setLocalStorage([...input_todo.Lists,input_todo.name])\n            setTodo({\n                name: '',\n                Lists: [...input_todo.Lists, input_todo.name],\n                isEdit: false,\n                index: 0\n            })\n        }\n        else {\n            const data = input_todo.Lists;\n            data[input_todo.index] = input_todo.name;\n            setTodo({\n                name: '',\n                Lists: [...data],\n                isEdit: false,\n                index: 0\n            })\n        }\n    }\n    const DeleteTodoHandler = (index) => {\n        if (window.confirm('Do you really want to delete this?')) {\n            const data = input_todo.Lists;\n            data.splice(index, 1);\n\n            setLocalStorage(data);\n\n            setTodo({\n                name: input_todo.name,\n                Lists: [...data],\n                isEdit: false,\n                index: 0\n            });\n        }\n    }\n    const EditToDoHandler = (index) => {\n        const data = input_todo.Lists[index];\n        setTodo({\n            name: data,\n            Lists: [...input_todo.Lists],\n            isEdit: true,\n            index: index\n        })\n    }\n    const setLocalStorage = (Lists) => {\n        localStorage.setItem(\"name\", '');\n        localStorage.setItem(\"Lists\", [...Lists]);\n        localStorage.setItem(\"isEdit\", false);\n        localStorage.setItem(\"index\", 0);\n    }\n\n    const setLocalStorageForTodoName = name => localStorage.setItem(\"name\", name);\n\n    return (\n        <Container>\n            <Row>\n                <Col>\n                    <h3>TODO App</h3>\n                    <hr />\n                </Col>\n            </Row>\n            <Row>\n                <Col>\n                    <AddEditTodo\n                        change={setTodoHandler}\n                        submit={AddToDoHandler}\n                        value={input_todo} />\n                </Col>\n            </Row>\n            <Row>\n                <Col>\n                    <TodoList data={input_todo} delete={DeleteTodoHandler} edit={EditToDoHandler} />\n                </Col>\n            </Row>\n        </Container>\n    )\n}\n\nexport default Todo;","import './App.css';\nimport Todo from './components/Todo';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Todo />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}